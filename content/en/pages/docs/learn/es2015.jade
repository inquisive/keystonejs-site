include ../../../templates/mixins/docsnav

block intro
	.page-header
		.container
			h1 Ref:ES2015  
			p.lead .using(system.js and babel to build a new KeystoneJS.com SPA with React)
	
block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content.jl-guide
			.jl-guide-section
				.jl-guide__header
					.p.lead Our SPA creation guide 
						.jl-guide__title-info  rundown of our requirements for a complete project    
				p The goal of this guide will be to take a current ExpressJS website built with Jade templates and convert it into a React based SPA integrated with Keystone. The current jade templates will remain and be included via plugin. A route config file will be used to designate the process for compiling each page.
				p  We will perform this excercise with source code from the current website for <a href="https://github.com/keystonejs/keystonejs-site">KeystoneJS.com</a>.  Since the final output will need to be a <code>gh-pages</code> deployment, this guide will also document that process as well.  
				p We will use <a href="https://github.com/systemjs/systemjs">System.js</a> with jspm to manage our packages, and build using ES6 thanks to <a href="http://babeljs.io">babel</a>  
				h4 Table of Contents
				ul.fancy-list
					li: a(href="#prepare") Prepare
					li: a(href="#client-files") Client Files
						ol
							li: a(href="#jade") Fix and create Jade files
							li: a(href="#route-config") Fix and move route config
							li: a(href="#jspm") Setup jspm and install client packages
							li: a(href="#app") Create App 
							li: a(href="#componenets") App Pages & Components
							li: a(href="#fetch") Fetch Component
							li: a(href="#render-jade") Jade Component
					li: a(href="#clean") Remove old files
					li: a(href="#build") Create build tasks with <code>gulp</code>
						ol
							li: a(href="#jade-functions") Build template functions from jade files
							li: a(href="#bundle") Bundle app with </code>systemjs-builder</code>
							li: a(href="#deploy") Deploy to <code>gh-pages</code>
					li: a(href="#prepare") Add Keystone
					
				h4 Final Folder Structure
				ul.folder-list
					li.folder content
						ol
							li.folder common/templates/layout
								ol
									li base.jade
									li dev_base.jade
									li footer.jade
									li header.jade
									li spa_base.jade
							li.folder en
								ol
									li.folder ...
									li ...
							li.folder zh
								ol
									li.folder ...
									li ...
							li 404.jade	
							li index.jade
					li.folder dev
						ol
							li apiMarked.js 
							li server.js
					li.folder public
						ol
							li.folder fonts
							li.folder images
							li.folder jspm_packages
							li.folder styles
							li.folder systemjs
								ol
									li.folder app
										ol
											li.folder common
												ol
													li gab.js
													li listen.js
													li render.js
													li routes.js
													li util.js
											li.folder html
												ol
													li apiMarked.js
													li templates.js
											li.folder pages
												ol
													li.folder component
														ol
															li generic.js
															li generic-fetch.js
															li kb.js
													li.folder fetch
														ol
															li fetch.js
															li jade.js
													li code-examples.js
													li example.js
													li kb-page.js
													li learning.js
									li.folder bundles
									li analytics.js
									li bootstrap-collapse.js
									li client.js
							li config.js
							li deploy.html
							li favicon.ico
					
			// prepare
			.jl-guide-section
				.jl-guide__header
					h2.jl-guide__title
						.jl-guide__title-label 
							div.jl-guide__title-count: span.jl-guide__title-count 1
							|  Prepare 
							.jl-guide__title-info  get your code base ready  
				p We will start by cloning our repo and creating a new branch <b>spa</b>.  Pick a unique branch for you if working from a current local repo.  
				pre.line-numbers.language-javascript
					| git clone git@github.com:keystonejs/keystonejs-site.git  
					| cd keystonejs-site 
					| git checkout -b spa  
				p Create a new folder for our client files.  We will serve this as a static just like public.  
				pre.command-line: code.language-javascript
					| mkdir client 
				p Install and save our new dependencies.  
				pre.command-line: code.language-javascript
					| npm i --save systemjs babel typescript keystone react react-router  
			.jl-guide-section 				
				.jl-guide__header
					h2.jl-guide__title
						.jl-guide__title-label 
							div.jl-guide__title-count: span.jl-guide__title-count 2
							| Client Files
							.jl-guide__title-info create your new client app 
				h3 Rework our jade files
				p We still like using jade.  It is quick, good for large blocks of html, and having seperate files is easier for multiple parties to maintain.  
				p For our SPA we only need an index file.  We will create a new base file and remove the template include lines from each of the content files. The old base file can eventually be removed.  
				p.note You do not have to remove all of the template includes from your content files.  Instead, rename each appropriate template file and replace it with a blank one.
				.code-header
					h4  Create your SPA index file. 
					p Copy <code>content/common/templates/layout/base.jade</code> to <code>content/common/templates/layout/spa_base.jade</code> and add a named div.
					p Replace the old javascript with the system.js tag.  We will add our app later.  
				pre.language-javascript.
					<code class="language-markup">
						// old code
							.docs-body
								block content
							
						// replace with
							.docs-body
								#keystonejs-spa
							
						/* javascript tag */
						// old code
							script(src="/js/lib/jquery/jquery-1.10.2.min.js")
							script(src='/js/lib/bootstrap/collapse.js')
							//- script(src='/js/lib/bootstrap/dropdown.js')
							script(src='/js/lib/prism/prism.min.js')
							script(src='/js/anchor-links.js')
							script(src='/js/api-code.js')
						
						// replace with
							script(src="system.js")
						
					</code>
					
				
				h3 Create a folder for your project
				p Create your project wherever you want:
				pre.command-line mkdir my-test-project
				
				p Than make sure you're in your new project:
				pre.command-line cd my-test-project
				
				h3 Run the generator
				pre.command-line yo keystone
				p The generator will ask you a few questions about what features you'd like to include, then configure and copy all the files you'll need into your project.
				p It will also install dependencies from npm so you're ready to go.
			
			.jl-guide-figure.jl-guide-figure--commands.hidden-xs
				.window.safari
					img(src='/images/getting-started/commands-safari.png', alt='Safari window', width=942, height=616)
				.window.terminal
					.terminal-cursor
					img(src='/images/getting-started/commands-terminal.png', alt='Terminal window', width=650, height=437)
				.figure-shadow
					
			.jl-guide-section
				.jl-guide__header
					h2.jl-guide__title
						span.jl-guide__title-count 3
						.jl-guide__title-label You're Done!
					p.jl-guide__subtitle So you just created your first KeystoneJS project, congrats!
					p.jl-guide__subtitle Run it in your command line like this:
					pre.command-line node keystone
					p.jl-guide__subtitle Then open <a href="http://localhost:3000" target="_blank">http://localhost:3000</a> to view it in your browser.
					p.jl-guide__subtitle If you want to see what the generator actually did take a look at our getting started guide, it'll walk you through the manual setup process. This is particularly helpful if you're new to Node.js.
					p.jl-guide__subtitle: a(href='/docs/getting-started') View the getting started guide &rarr;
			
			.jl-guide-figure.jl-guide-figure--finished.wow-much-find.hidden-xs
				img(src='/images/getting-started/commands-safari.png', alt='Safari window', width=1680, height=600).sr-only
				
			.jl-guide-section
				div
					.jl-guide__header
						h2.jl-guide__title
							span.jl-guide__title-count ?
							.jl-guide__title-label Problems
						p.jl-guide__subtitle Something went wrong? Hopefully these tips will help.
						
						h3 ERR! Please try running this command again as root/Administrator.
						p When running npm install -g generator-keystone, you may get an EACCES error asking you to run the command again as root/Administrator. This indicates that there is a permissions issue.
						p On your development system you can change directory ownership to the current $USER so you do not have to run sudo while installing untrusted code:
						pre
							| sudo chown -R $USER /usr/local
							| 
							| # Other directories may be required depending on your O/S
							| sudo chown -R $USER /usr/lib/node_modules/
						
						p For a production/shared environment you may wish to re-run the npm command with the sudo prefix:

						pre sudo npm install -g generator-keystone
						p For more information, see the <a href='http://foohack.com/2010/08/intro-to-npm/#what_no_sudo', target='_blank'>"What, no sudo?"</a> of the Intro to npm by Isaac Schulueter.

						h3 What do you mean it couldn't find my Database?
						p By default, KeystoneJS will look for a MongoDB server running on localhost on the default port, and connect to it. If you're getting errors related to the MongoDB connection, make sure your MongoDB server is running.
						p If you haven't installed MongoDB yet, follow <a href="https://www.mongodb.org/downloads" target="_blank">the official instructions.</a>
						p To connect to a server other than localhost, add a MONGO_URI setting to the .env file in your Keystone project directory:
						pre MONGO_URI=mongodb://your-server/database-name
						
						h3 Something else?
						p.jl-guide__subtitle If your issue still isn't resolved, reach out to us on the <a href="https://groups.google.com/d/forum/keystonejs" target="_blank">KeystoneJS Google Group</a>.

			
				
